//By Cole _ December 11th 2023
unsigned long TimerCount; 
unsigned long previousTimerCount;
unsigned long LCDUpdateTime;

const int RELAY_PIN = 2;
const int sensorPin = 5;  //for wheel
const int dig_inp = 11;
int pinState = LOW;
int oldpinState = LOW;
int LCDprintValue = 0;
int sawPulse = 1;
int reading;
int wuyp;
int lastButtonState = LOW;
int iterationCount = 0;

unsigned long lastDebounceTime = 0;  
unsigned long debounceDelay = 5; //adjust sensitivity of wheel debounce time here

//--------------------start of pedal variables-----------------------

unsigned long TimerCountPedal; 
unsigned long previousTimerCountPedal;

const int sensorPinPedal = 7;
int pinStatePedal = LOW;
int oldpinStatePedal = LOW;
int LCDprintValuePedal = 0;
int sawPulsePedal = 1;
int readingPedal;
int lastButtonStatePedal = LOW;
int pedalAssistCredit = 0;
int iterationCountPedal = 0;

unsigned long lastDebounceTimePedal = 0;  
unsigned long debounceDelayPedal = 5;  //adjust sensitivity of pedal debounce time here

//----------------------end of pedal variables-----------------------

void setup() {

  pinMode(RELAY_PIN, OUTPUT);

  pinMode(dig_inp, INPUT);

  pinMode(sensorPin, INPUT);

  // Gives TimerCount a millisecond value to start with. millis() is the current
  // time in milliseconds since the Arduino booted up
  TimerCount = millis();
  
  // Gives previousTimerCount a millisecond value to start with 
  previousTimerCount = millis(); 

  //---------start pedal setup---------------------------------
  
  pinMode(sensorPinPedal, INPUT);
  TimerCountPedal = millis();
  previousTimerCountPedal = millis();

  //---------end pedal setup---------------------------------

  Serial.begin(9600);

}

void loop() {
  wuyp = digitalRead(dig_inp);
  //-------------------------------start of wheel speedometer with debounce and speed calculation------------------------------------
                                                  /* start of debounce---------------------------*/
  reading = digitalRead(sensorPin);

  if (reading != lastButtonState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
             pinState = reading;
    }
    
  

  lastButtonState = reading;


                                                /* end of debounce---------------------------*/

  if (pinState == HIGH && pinState != oldpinState){ 

   
    TimerCount = millis();

    // Subtracts the time the last pulse was received from the time the newest
    //  212 cm      1 km      1 rev    3600000 ms      7632 km
    //  ------- X -------- X ------- X -------    = ------------ = km/h
    //   1 rev    100000cm   Bms2-Ams1    1 hr       (B-A)* 1 hr     
    LCDprintValue = (((unsigned long)7632)/(TimerCount - previousTimerCount)); 
    
    /*troubleshooting below remove
      Serial.print(" [ realtime ");
      Serial.print(LCDprintValue);
      Serial.print(" km/h ] ");  
      Serial.print(" [ TimerCount "); 
      Serial.print(TimerCount);
      Serial.print(" ms ] ");
      Serial.print(" [ previousTimerCount "); 
      Serial.print(previousTimerCount);
      Serial.print(" ms ] ");
      Serial.print('\n');
      
    troubleshooting above remove*/

    // Sets a flag 
    //sawPulse = 1; 
    iterationCount = 0;

    previousTimerCount = TimerCount; 

  }
  //-------------------------------end of wheel speedometer with debounce and speed calculation------------------------------------

  //-------------------------------start of pedal speedometer with debounce and revolution calculation------------------------------------
                                                  /* start of debounce---------------------------*/
  readingPedal = digitalRead(sensorPinPedal);

  if (readingPedal != lastButtonStatePedal) {
    // reset the debouncing timer
    lastDebounceTimePedal = millis();
  }

  if ((millis() - lastDebounceTimePedal) > debounceDelayPedal) {
             pinStatePedal = readingPedal;
    }
    
  

  lastButtonStatePedal = readingPedal;


                                                /* end of debounce---------------------------*/

  if (pinStatePedal == HIGH && pinStatePedal != oldpinStatePedal){ 

   
    TimerCountPedal = millis();

    // Subtracts the time the last pulse was received from the time the newest
    //    1 rev      1000 ms    60 sec          60000 rev 
    //  ---------  X -------- X -------   =   ------------  = rev/min
    //   Bms2-Ams1    1 sec     1 min         (B-A)*1 min     
    LCDprintValuePedal = (((unsigned long)60000)/(TimerCountPedal - previousTimerCountPedal)); 

    // Sets a flag 
    //sawPulsePedal = 1; 
    iterationCountPedal = 0;

    previousTimerCountPedal = TimerCountPedal; 

  }
  //-------------------------------end of pedal speedometer with debounce and revolution calculation------------------------------------

  //-------------------------------start of one second loop section------------------------------------
  //this is so the LCD only updates once a second
  if (LCDUpdateTime <= millis()){ 
    //------start of wheel print---------------------------
    if ((2 < LCDprintValue) && (iterationCount <= 2)){     //conservatively set greater than 2km/h for reliability & 2 iterations of 1000ms with no new pulse zeros LCDprintValue 

      Serial.print(LCDprintValue); 
      Serial.print(" km/h "); 
      //Serial.print('\n');

      iterationCount = iterationCount + 1;
    }

    // not detected a new pulse within the last second
    else { 
      LCDprintValue = 0;
      Serial.print(LCDprintValue);
      Serial.print(" km/h ");
      //Serial.print("0 km/h "); //Prints zero for the speed
      //Serial.print(" [real speed behind that zero "); 
      //Serial.print(LCDprintValue); 
      //Serial.print(" ] ");
      //testing Serial.print(" hidden value during zero is "); //show hidden stored last LCDprintValue
      //testing Serial.print(LCDprintValue);

      // Prints spaces to clear the line now in preparation for the
      // next speed value to be displayed
      //Serial.print('\n'); 
    }
    if (wuyp == HIGH){
      goto wxtb;
    }
    //------end of wheel print---------------------------

    //------start of pedal print---------------------------
    // Checks to see if sawPulse was set to 1 by the first
    if ((11 < LCDprintValuePedal) && (iterationCountPedal <= 4)){     //Set minimum to above 11rev/min for reliability & 4 iterations of 1000ms with no new pulse zeros LCDprintValuePedal 

      Serial.print(LCDprintValuePedal); 
      Serial.print(" rev/min "); 
      //Serial.print('\n');

      //sawPulsePedal = 0; 
      iterationCountPedal = iterationCountPedal + 1;
    }

    // not detected a new pulse within the last second
    else { 
      LCDprintValuePedal = 0;
      Serial.print("0 rev/min "); //Prints zero for the speed
      
    }
    //------end of pedal print---------------------------
    //-----------------------------Start of Pedal Assist Credit Allowance Table---------------------
    
    if (LCDprintValuePedal <= 11){  //5.45 sec per revolution or slower, no credit given
      pedalAssistCredit = 0; //km/h credit
    }
    if ((11 < LCDprintValuePedal) && (LCDprintValuePedal < 17)){  //5.40sec - 3.52 sec per pedal revolution
      pedalAssistCredit = 7; //km/h credit
    }
    if ((17 <= LCDprintValuePedal) && (LCDprintValuePedal < 24)){  //3.51sec - 2.5 sec per pedal revolution
      pedalAssistCredit = 10; //km/h credit
    }
    if ((24 <= LCDprintValuePedal) && (LCDprintValuePedal < 31)){  //2.49 sec - 1.93 sec per pedal revolution
      pedalAssistCredit = 15; //km/h credit
    }
    if ((31 <= LCDprintValuePedal) && (LCDprintValuePedal < 40)){   //1.92 sec - 1.5 sec per pedal revolution
      pedalAssistCredit = 20; //km/h credit
    }
    if (40 <= LCDprintValuePedal){  //minimum pedal of 1.5 sec per rev or quicker to earn max speed allowance of 24km/h
      pedalAssistCredit = 24; //km/h credit
    }
    Serial.print("| pedalAssistCredit is ");     
    Serial.print(pedalAssistCredit);           
    //-----------------------------End of Pedal Assist Credit Allowance Table-----------------------
    //----start of conditional relay on max speed of 24km/h & proportional assist interlock check----------
    
    if ((LCDprintValue  <= 24) && (LCDprintValue <= pedalAssistCredit) && (LCDprintValue != 0)) {   //    verify current speed is less than 24km/h and current speed is allowable against the earned pedalAssistCredit  
      //Serial.print(" LCDprintValuePedal is ");
      //Serial.print(LCDprintValuePedal);
      wxtb:
      digitalWrite(RELAY_PIN, HIGH);
      Serial.print(" | relay is high");
      Serial.print('\n');
    }
    else {
      digitalWrite(RELAY_PIN, LOW);
      Serial.print(" | relay is low");
      Serial.print('\n');
    }
    //-------------end of relay-----------------

    // Checks the time, adds 1000 milliseconds (1 second) to it, and
    // records it. this value is compared against the time in
    // milliseconds above to see if a second has elapsed.
    LCDUpdateTime = (millis()+1000); 

  }
  //-------------------------------end of one second loop section------------------------------------

  // Sets oldpinState to the last measured state from the sensor so it can be
  // used to see if that state has changed next time the loop runs
  oldpinState = pinState; //for wheel
  oldpinStatePedal = pinStatePedal;  //for pedal

}
